{
	"$schema": "http://json-schema.org/schema#",
	"id": "https://cardgamesim.finoldigital.com/CardGameDef",
	"description": "A custom card game definition to be used within Card Game Simulator",
	"type": "object",
	"definitions": {
	*PropertyDef* has the properties: *Name* and *Type*. *PropertyDef:Name* is a string indicating the name of the property, and this name can be referenced by CardImageURLProperty, cardPrimaryProperty, Enums, Extras, and HsdPropertyId. *PropertyDef:Type* can be **string**, **integer**, **enum**, or **enumList**.
	*DeckURL* has the properties: *Name*, and *URL*. If the "decks/" folder does not exist, CGS will go through each DeckURL, and save the data from *DeckURL:URL* to "decks/*DeckURL:Name*.\<DeckFileType\>".
	*EnumDef* has the properties: *Property* and *Values*. *EnumDef:Property* refers to a *PropertyDef:Name* in \<cardProperties\>. *EnumDef:Values* is a Dictionary with strings as the keys and values. The value is displayed to the user through the UI while the keys remain hidden. If the keys are entered as a hexadecimal integers (prefixed with 0x), multiple values can go through bitwise and/ors to have a single enumValue represent multiple values. The multiple values would be displayed together to the user, using "\|" as the delimiter.
	*ExtraDef* has the properties: *Group*, *Property*, and *Value*. *ExtraDef:Property* refers to a *PropertyDef:Name* in \<cardProperties\>. *ExtraDef:Value* is a string. If *Card:Properties\[ExtraDef:Property\]* equals *ExtraDef:Value*, then that card will be moved from the main deck and put into the *ExtraDef:Group* zone during play mode. If no *ExtraDef:Group* is defined, CGS will default to "Extras". The **hsd** DeckFileType treats all extra cards as Heroes, and the **ydk** DeckFileType treats all extra cards as extra deck cards.
	*GameBoardCard* has the properties: *Card*, and *Boards*. When a deck is loaded in Play Mode, any card with *Card:Id* = *Card* will cause *Boards* to be put into the play area. *Boards* is a List of *GameBoard*s. *GameBoard* has the properties *Id*, *OffsetMax*, and *OffsetMin*.  *Id* indicates which image should display, and *OffsetMax* and *OffsetMin* are Vector2s which indicate the positions (in inches) of the top-right corner and the bottom-left corner.
	*GameBoardURL* has the properties: *Id*, and *URL*. If the "boards/" folder does not exist, CGS will go through each GameBoardURL, and save the data from *GameBoardURL:URL* to "boards/*GameBoardURL:Id*.\<GameBoardFileType\>".
	},
	"properties": {
		"name": {
			"description": "This name is the name of the custom card game as it appears to the user, and CGS will create the data for this card game in a folder with this name.",
			"type": "string"
		},
		"allCardsUrl": {
			"description": "From allCardsUrl, CGS downloads the json that contains info about the cards for the game. If CGS is able to successfully download this file, it will save it as AllCards.json.",
			"type": "string",
			"format": "uri"
		},
		"allCardsZipped": {
			"description": "If allCardsUrl points to a zipped file, set allCardsZipped to true, and CGS will unzip the file and then save the unzipped file as AllCards.json.",
			"type": "boolean"
		},
		"allSetsUrl": {
			"description": "From allSetsUrl, CGS downloads the json that contains info about the sets for the game. If CGS is able to successfully download this json, it will save it as AllSets.json.",
			"type": "string",
			"format": "uri"
		},
		"allCardsZipped": {
			"description": "If allSetsUrl points to a zipped file, set allSetsZipped to true, and CGS will unzip the file and then save the unzipped file as AllSets.json.",
			"type": "boolean"
		},
		"autoUpdate": {
			"description": "If autoUpdate is true, CGS will re-download <Name>.json, AllCards.json, and AllSets.json every time the user starts to play that custom card game.",
			"type": "boolean"
		},
		"autoUpdateUrl": {
			"description": "autoUpdateUrl should correspond to the url from which users download <Name>.json. CGS will automatically re-download the custom game from this url if autoUpdate is set to true.",
			"type": "string",
			"format": "uri"
		},
		"backgroundImageFileType": {
			"description": "backgroundImageFileType is the file type extension for the image file that CGS downloads from backgroundImageUrl.",
			"default": "png",
			"type": "string"
		},
		"backgroundImageUrl": {
			"description": "If backgroundImageUrl is a valid url, CGS will download the image at that url and save it as Background.<backgroundImageFileType>. CGS will attempt to display the  Background.<backgroundImageFileType> in the background anytime the custom card game is selected by the user. If it is unable to read Background.<backgroundImageFileType>, CGS will simply display the CGS logo in the background.",
			"type": "string",
			"format": "uri"
		},
		"cardBackImageFileType": {
			"description": "cardBackImageFileType is the file type extension for the image file that CGS downloads from cardBackImageUrl.",
			"default": "png",
			"type": "string"
		},
		"cardBackImageUrl": {
			"description": "If cardBackImageUrl is a valid url, CGS will download the image at that url and save it as CardBack.<cardBackImageFileType>. CGS will display the CardBack.<cardBackImageFileType> when the user turns a card facedown or if CGS is unable to find the appropriate card image. If CGS is unable to get a custom card back, CGS will use the default CGS card back.",
			"type": "string",
			"format": "uri"
		},
		"cardHeight": {
			"description": "cardHeight is the height in inches of each card.",
			"default": 3.5,
			"type": "number"
		},
		"cardIdIdentifier": {
			"description": "Every card must have a unique card id. When defining a card in AllCards.json or AllSets.json, you can have the *Card:Id* mapped to the field defined by cardIdIdentifier. Most custom games will likely want to keep the default cardIdIdentifier.",
			"default": "id",
			"type": "string"
		},
		"cardImageFileType": {
			"description": "cardImageFileType is the file type extension for the image files that CGS downloads for each individual card.",
			"default": "png",
			"type": "string"
		},
		"cardImageURLBase": {
			"description": "cardImageURLBase can be used by cardImageURLFormat to indicate the domain/directory from which CGS should download individual card images.",
			"type": "string",
			"format": "uri"
		},
		"cardImageURLFormat": {
			"description": "cardImageFileType is the file type extension for the image files that CGS downloads for each individual card.",
			"default": "{0}/{1}.{2}",
			"type": "string"
		},
		"cardImageURLProperty": {
			"description": "cardImageURLProperty can be used by cardImageURLFormat to indicate which *Card:Property* contains the url/name for the image of each individual card.",
			"type": "string"
		},
		"cardNameIdentifier": {
			"description": "When defining a card in AllCards.json or AllSets.json, you can have the *Card:Name* mapped to the field defined by cardNameIdentifier. Most custom games will likely want to keep the default cardNameIdentifier.",
			"default": "name",
			"type": "string"
		},
		"cardProperties": {
			"items": { "type": "$ref" },
			"type": "array"
		},
		"cardWidth": {
			"description": "cardWidth is the width in inches of each card.",
			"default": 2.5,
			"type": "number"
		},
		"deckFileType": {
			"description": "When saving a deck, the formatting for how it is saved and loaded is defined by the deckFileType. dec refers to the old MTGO deck file format. hsd refers to the Hearthstone deck string format. ydk refers to the YGOPRO deck file format. txt parses each line for the following: <Quantity> [*Card:Id*] *Card:Name* (*Card:SetCode*)",
			"enum": ["dec", "hsd", "ydk", "txt"],
			"default": "txt",
			"type": "string"
		},
		"deckMaxCount": {
			"description": "deckMaxCount is used to decide how many card slots should appear in the deck editor, when the custom game is selected.",
			"default": 75,
			"minimum": 0,
			"type": "integer"
		},
		"deckURLs": {
			"items": { "type": "$ref" },
			"type": "array"
		},
		"enums": {
			"items": { "type": "$ref" },
			"type": "array"
		},
		"extras": {
			"items": { "type": "$ref" },
			"type": "array"
		},
		"gameBoardFileType": {
			"description": "gameBoardFileType is the file type extension for the image files that CGS downloads for each game board.",
			"default": "png",
			"type": "string"
		},
		"gameBoardCards": {
			"items": { "type": "$ref" },
			"type": "array"
		},
		"gameBoardURLs": {
			"items": { "type": "$ref" },
			"type": "array"
		},
		"gameHasDiscardZone": {
			"description": "If gameHasDiscardZone is set to true, a Discard Zone will be added to the Zones Viewer, to which cards will be sent when removed from the play area. If gameHasDiscardZone is set to false, cards will simply deleted when removed from the play area.",
			"type": "boolean"
		},
		"gameStartHandCount": {
			"description": "gameStartHandCount indicates how many cards are automatically dealt from the deck to the hand, when a user loads a deck in Play Mode.",
			"type": "integer"
		},
		"gameStartPointsCount": {
			"description": "gameStartPointsCount indicates how many points are assigned to each player, when that player loads a deck in Play Mode.",
			"minimum": 0,
			"type": "integer"
		},
		"hsdPropertyId": {
			"description": "When saving or loading a deck with the hsd deckFileType, hsdPropertyId refers to the *Card:Property* used to uniquely identify each card and is stored as a varint within the deck string.",
			"default": "dbfId",
			"type": "string"
		},
		"playAreaHeight": {
			"description": "playAreaHeight is the height in inches of the play area in Play Mode.",
			"default": 13.5,
			"exclusiveMinimum": 0,
			"type": "number"
		},
		"playAreaWidth": {
			"description": "playAreaWidth is the width in inches of the play area in Play Mode.",
			"default": 23.5,
			"exclusiveMinimum": 0,
			"type": "number"
		},
		"setCodeIdentifier": {
			"description": "When defining a set in AllSets.json, you can have the *Set:Code* mapped to the field defined by setCodeIdentifier. Most custom games will likely want to keep the default setCodeIdentifier. If no mapping is created for the set, CGS will use _CGSDEFAULT_ as the default *Set:Code*.",
			"default": "code",
			"type": "string"
		},
		"setNameIdentifier": {
			"description": "When defining a set in AllSets.json, you can have the *Set:Name* mapped to the field defined by setNameIdentifier. Most custom games will likely want to keep the default setNameIdentifier.",
			"default": "name",
			"type": "string"
		}
	},
	"required": ["name"]
}
